generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String?
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  leagueMembers LeagueMember[]
  teams         Team[]

  // Lato opposto della relazione "owner" su League
  ownedLeagues  League[]        @relation("LeagueOwner")
}

model League {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  ownerId       Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relazione esplicita verso User come proprietario
  owner         User?           @relation("LeagueOwner", fields: [ownerId], references: [id])

  competitions  Competition[]
  members       LeagueMember[]
}

model LeagueMember {
  id        Int      @id @default(autoincrement())
  leagueId  Int
  userId    Int
  createdAt DateTime @default(now())

  league    League   @relation(fields: [leagueId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([leagueId, userId])
}

model Competition {
  id          Int        @id @default(autoincrement())
  leagueId    Int
  name        String
  type        String     // "H2H" | "F1"
  totalRounds Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  league      League     @relation(fields: [leagueId], references: [id])
  teams       Team[]
  rounds      Round[]
}

model Round {
  id            Int           @id @default(autoincrement())
  competitionId Int
  name          String
  dayIndex      Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime      @default(now())

  competition   Competition   @relation(fields: [competitionId], references: [id])

  lineups       Lineup[]
  results       PlayerResult[]

  @@unique([competitionId, dayIndex])
}

model Team {
  id             Int          @id @default(autoincrement())
  name           String
  competitionId  Int
  userId         Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  competition    Competition  @relation(fields: [competitionId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])

  lineups        Lineup[]
}

model Lineup {
  id        Int      @id @default(autoincrement())
  teamId    Int
  roundId   Int
  entries   Json
  createdAt DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id])
  round     Round    @relation(fields: [roundId], references: [id])

  @@unique([teamId, roundId])
}

model PlayerResult {
  id        Int      @id @default(autoincrement())
  roundId   Int
  player    String
  points    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  round     Round    @relation(fields: [roundId], references: [id])

  @@unique([roundId, player])
}

model Match {
  id            Int      @id @default(autoincrement())
  competitionId Int
  roundId       Int
  homeTeamId    Int
  awayTeamId    Int
  homeScore     Float    @default(0)
  awayScore     Float    @default(0)
  result        String?
  createdAt     DateTime @default(now())

  @@map("Match")
  @@unique([competitionId, roundId, homeTeamId, awayTeamId])
  @@index([competitionId])
  @@index([roundId])
}
